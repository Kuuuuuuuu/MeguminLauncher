using System;using System.Diagnostics;using System.IO;using System.Net;using System.Reflection;using System.Threading;using System.Threading.Tasks;using System.Windows;using System.Windows.Input;using System.Windows.Threading;using IKriv.Threading.Tasks;namespace Megumin{    public partial class MainWindow    {        private readonly RichPresence _presence;        private bool _done = true;        private string _previousServer;        private bool _privatemode;        private string _status;        private int _ticks;        public MainWindow()        {            _presence = new RichPresence();            var oldPath = Path.ChangeExtension(Assembly.GetExecutingAssembly().Location, "old");            if (File.Exists(oldPath)) File.Delete(oldPath);            InitializeComponent();            XboxAccount.Content = "Xbox Account: " + Utils.GetXboxGamertag();            MinecraftVersion.Content = "Version: " + Utils.GetVersion();            Task.Run(() =>            {                while (true)                {                    if (!_done)                    {                        if (++_ticks > 12)                            _ticks = 0;                        var load = _status + ".";                        if (_ticks > 4) load += ".";                        if (_ticks > 8) load += ".";                        Application.Current.Dispatcher.Invoke(DispatcherPriority.Render,                            new Action(() => InjectButton.Content = load));                    }                    Thread.Sleep(100);                }                // ReSharper disable once FunctionNeverReturns            });        }        private void SetStatus(string status)        {            if (status == "done")            {                _done = true;                _status = string.Empty;                _ticks = 0;                Application.Current.Dispatcher.Invoke(DispatcherPriority.Render,                    new Action(() => InjectButton.Content = "Load Megumin"));            }            else            {                _done = false;                _status = status;            }        }        private void PrivateButton_Click(object sender, RoutedEventArgs e)        {            if (_privatemode)            {                PrivateButton.Content = "Public";                _privatemode = false;            }            else            {                PrivateButton.Content = "Private";                _privatemode = true;            }        }        private void InjectButton_Left(object sender, RoutedEventArgs e)        {            if (!_done) return;            SetStatus("Injecting");            var injectClient = new WebClient();            var dllPath = Utils.OnixPath + "\\OnixClient.dll";            if (File.Exists(dllPath) && Process.GetProcessesByName("Minecraft.Windows").Length == 0)                File.Delete(dllPath);            else if (!File.Exists(dllPath))                injectClient.DownloadFile(                    "https://github.com/bernarddesfosse/onixclientautoupdate/raw/main/OnixClient.dll", dllPath);            Inject(dllPath);            PbStatus.Value = 100;            _presence.ChangePresence("In Menus", Utils.GetXboxGamertag(), _privatemode);            SetStatus("done");#pragma warning disable CS4014            Loop();        }        private void ChangeServer()        {            string server;            try            {                server = File.ReadAllText(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData)                                          + @"\Packages\Microsoft.MinecraftUWP_8wekyb3d8bbwe\RoamingState\OnixClient\Launcher\server.txt");            }            catch            {                server = "Unknown";            }            if (server == _previousServer) return;            _previousServer = server;            if (server == "")                _presence.ChangePresence("In Menus", Utils.GetXboxGamertag(), _privatemode);            else if (server.Contains("In a World, "))                _presence.ChangePresence("In a world: " + server.Remove(0, 12), Utils.GetXboxGamertag(), _privatemode);            else                switch (server)                {                    case "geo.hivebedrock.network":                    case "fr.hivebedrock.network":                    case "ca.hivebedrock.network":                    case "sg.hivebedrock.network":                    case "jp.hivebedrock.network":                        _presence.ChangePresence("Playing on The Hive", Utils.GetXboxGamertag(), _privatemode);                        break;                    case "play.inpvp.net":                        _presence.ChangePresence("Playing on Mineville", Utils.GetXboxGamertag(), _privatemode);                        break;                    case "mco.cubecraft.net":                        _presence.ChangePresence("Playing on CubeCraft", Utils.GetXboxGamertag(), _privatemode);                        break;                    case "mco.mineplex.com":                        _presence.ChangePresence("Playing on Mineplex", Utils.GetXboxGamertag(), _privatemode);                        break;                    case "play.galaxite.net":                        _presence.ChangePresence("Playing on Galaxite", Utils.GetXboxGamertag(), _privatemode);                        break;                    case "mco.lbsg.net":                        _presence.ChangePresence("Playing on Lifeboat", Utils.GetXboxGamertag(), _privatemode);                        break;                    case "play.nethergames.org":                        _presence.ChangePresence("Playing on NetherGames", Utils.GetXboxGamertag(), _privatemode);                        break;                    case "play.hyperlandsmc.net":                        _presence.ChangePresence("Playing on HyperLands", Utils.GetXboxGamertag(), _privatemode);                        break;                    case "zeqa.net":                        _presence.ChangePresence("Playing on Zeqa", Utils.GetXboxGamertag(), _privatemode);                        break;                    case "rushnation.net":                        _presence.ChangePresence("Playing on RushNation", Utils.GetXboxGamertag(), _privatemode);                        break;                    case "play.pixelparadise.gg":                        _presence.ChangePresence("Playing on PixelParadise", Utils.GetXboxGamertag(), _privatemode);                        break;                    case "play.venitymc.com":                        _presence.ChangePresence("Playing on VenityMC", Utils.GetXboxGamertag(), _privatemode);                        break;                    case "ectary.club":                    case "eu.ectary.club":                    case "na.ectary.club":                    case "as.ectary.club":                        _presence.ChangePresence("Playing on Ectary", Utils.GetXboxGamertag(), _privatemode);                        break;                    default:                        _presence.ChangePresence("Playing on " + server, Utils.GetXboxGamertag(), _privatemode);                        break;                }        }        private async Task Loop()        {            using (var timer = new TaskTimer(300).Start())            {                foreach (var task in timer)                {                    await task;                    var minecraftIndex = Process.GetProcessesByName("Minecraft.Windows");                    if (minecraftIndex.Length == 0)                    {                        _presence.ResetPresence();                        PbStatus.Value = 0;                    }                    else                    {                        ChangeServer();                    }                }            }        }        private void CloseWindow(object sender, MouseButtonEventArgs e)        {            Application.Current.Shutdown();        }        private void DragWindow(object sender, MouseButtonEventArgs e)        {            DragMove();        }    }}